// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è CSS –∫–ª–∞—Å—Å–æ–≤
// –ó–∞–ø—É—Å–∫: node check-duplicates.js

const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º style.css
const cssFile = path.join(__dirname, 'style.css');
const cssContent = fs.readFileSync(cssFile, 'utf8');

// –ò—â–µ–º –≤—Å–µ CSS –∫–ª–∞—Å—Å—ã
const classRegex = /\.([a-zA-Z][a-zA-Z0-9_-]*)/g;
const classes = [];
let match;

while ((match = classRegex.exec(cssContent)) !== null) {
    classes.push(match[1]);
}

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∞–º
const classGroups = {};
classes.forEach(className => {
    if (!classGroups[className]) {
        classGroups[className] = [];
    }
    classGroups[className].push(className);
});

// –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏
const duplicates = {};
Object.keys(classGroups).forEach(className => {
    if (classGroups[className].length > 1) {
        duplicates[className] = classGroups[className].length;
    }
});

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if (Object.keys(duplicates).length === 0) {
    console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
} else {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã:');
    console.log('=====================================');
    Object.keys(duplicates).forEach(className => {
        console.log(`.${className} - –Ω–∞–π–¥–µ–Ω–æ ${duplicates[className]} —Ä–∞–∑(–∞)`);
    });
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: ${classes.length}`);
console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: ${Object.keys(classGroups).length}`);
console.log(`–î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è: ${Object.keys(duplicates).length}`);
